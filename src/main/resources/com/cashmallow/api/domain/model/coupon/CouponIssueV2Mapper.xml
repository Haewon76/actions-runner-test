<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cashmallow.api.domain.model.coupon.CouponIssueV2Mapper">

    <!-- 쿠폰 발급 리스트 조회 (사용, 미사용 전부 조회) -->
    <select id="getCouponIssueList"
            parameterType="com.cashmallow.api.interfaces.coupon.dto.req.CouponSearchRequest"
            resultType="com.cashmallow.api.domain.model.coupon.vo.CouponIssueManagement">

       SELECT i.id as coupon_issue_id
            , c.id as coupon_id
            , c.from_country_code
            , c.is_system
            , c.is_active
            , i.target_type
            , i.send_type
            , i.issue_date
            , c.coupon_code
            , c.coupon_name
            , (sum(CASE WHEN u.available_status = 'USED' THEN 1 ELSE 0 END)) as used_count
            , (sum(CASE WHEN u.available_status = 'USED' THEN u.coupon_used_amount ELSE 0 END)) as coupon_used_amount
            , c.coupon_discount_type
            , c.coupon_discount_value
            , c.max_discount_amount
            , c.min_required_amount
            , c.service_type
            , i.created_id
        FROM coupon_issue_v2 i
        LEFT OUTER JOIN coupon_v2 c
                     ON c.id = i.coupon_id
        LEFT OUTER JOIN coupon_user_v2 u
                     ON u.coupon_issue_id = i.id
                    AND c.id = u.coupon_id
                  WHERE c.from_country_code = #{fromCountryCode}
        <if test="couponCodeName != null and !''.equals(couponCodeName)">
            AND (
                c.coupon_code LIKE CONCAT(#{couponCodeName}, '%') OR c.coupon_name LIKE CONCAT(#{couponCodeName}, '%')
            )
        </if>
        <if test="searchStartDate != null and !''.equals(searchStartDate) and searchEndDate != null and !''.equals(searchEndDate)">
            AND i.issue_date_utc BETWEEN #{searchStartDate} AND #{searchEndDate}
        </if>
        <if test="isSystem != null and !''.equals(isSystem)">
            AND c.is_system = #{isSystem}
        </if>
        <if test="isActive != null and !''.equals(isActive)">
            AND c.is_active = #{isActive}
        </if>
        GROUP BY c.id
                , c.from_country_code
                , c.is_system
                , c.is_active
                , i.target_type
                , i.send_type
                , i.issue_date
                , c.coupon_code
                , c.coupon_name
                , c.coupon_discount_type
                , c.coupon_discount_value
                , c.max_discount_amount
                , c.min_required_amount
                , c.service_type
                , i.created_id
                , i.id
        <if test="sortColumnCode != null and !''.equals(sortColumnCode)">
            <choose>
                <when test="sortColumnCode == 'coupon_id' and sortColumnOrder == 'ASC'">
                    ORDER BY c.id ASC
                </when>
                <when test="sortColumnCode == 'coupon_id' and sortColumnOrder == 'DESC'">
                    ORDER BY c.id DESC
                </when>

                <when test="sortColumnCode == 'is_system' and sortColumnOrder == 'ASC'">
                    ORDER BY c.is_system ASC
                </when>
                <when test="sortColumnCode == 'is_system' and sortColumnOrder == 'DESC'">
                    ORDER BY c.is_system DESC
                </when>

                <when test="sortColumnCode == 'is_acitve' and sortColumnOrder == 'ASC'">
                    ORDER BY c.is_acitve ASC
                </when>
                <when test="sortColumnCode == 'is_acitve' and sortColumnOrder == 'DESC'">
                    ORDER BY c.is_acitve DESC
                </when>

                <when test="sortColumnCode == 'target_type' and sortColumnOrder == 'ASC'">
                    ORDER BY i.target_type ASC
                </when>
                <when test="sortColumnCode == 'target_type' and sortColumnOrder == 'DESC'">
                    ORDER BY i.target_type DESC
                </when>

                <when test="sortColumnCode == 'send_type' and sortColumnOrder == 'ASC'">
                    ORDER BY i.send_type ASC
                </when>
                <when test="sortColumnCode == 'send_type' and sortColumnOrder == 'DESC'">
                    ORDER BY i.send_type DESC
                </when>

                <when test="sortColumnCode == 'issue_date' and sortColumnOrder == 'ASC'">
                    ORDER BY i.issue_date ASC
                </when>
                <when test="sortColumnCode == 'issue_date' and sortColumnOrder == 'DESC'">
                    ORDER BY i.issue_date DESC
                </when>

                <when test="sortColumnCode == 'coupon_name' and sortColumnOrder == 'ASC'">
                    ORDER BY c.coupon_name ASC
                </when>
                <when test="sortColumnCode == 'coupon_name' and sortColumnOrder == 'DESC'">
                    ORDER BY c.coupon_name DESC
                </when>

                <when test="sortColumnCode == 'coupon_code' and sortColumnOrder == 'ASC'">
                    ORDER BY c.coupon_code ASC
                </when>
                <when test="sortColumnCode == 'coupon_code' and sortColumnOrder == 'DESC'">
                    ORDER BY c.coupon_code DESC
                </when>

                <when test="sortColumnCode == 'used_count' and sortColumnOrder == 'ASC'">
                    ORDER BY used_count ASC
                </when>
                <when test="sortColumnCode == 'used_count' and sortColumnOrder == 'DESC'">
                    ORDER BY used_count DESC
                </when>

                <when test="sortColumnCode == 'coupon_used_amount' and sortColumnOrder == 'ASC'">
                    ORDER BY coupon_used_amount ASC
                </when>
                <when test="sortColumnCode == 'coupon_used_amount' and sortColumnOrder == 'DESC'">
                    ORDER BY coupon_used_amount DESC
                </when>

                <when test="sortColumnCode == 'coupon_discount_type' and sortColumnOrder == 'ASC'">
                    ORDER BY c.coupon_discount_type ASC
                </when>
                <when test="sortColumnCode == 'coupon_discount_type' and sortColumnOrder == 'DESC'">
                    ORDER BY c.coupon_discount_type DESC
                </when>

                <when test="sortColumnCode == 'coupon_discount_value' and sortColumnOrder == 'ASC'">
                    ORDER BY c.coupon_discount_value ASC
                </when>
                <when test="sortColumnCode == 'coupon_discount_value' and sortColumnOrder == 'DESC'">
                    ORDER BY c.coupon_discount_value DESC
                </when>

                <when test="sortColumnCode == 'max_discount_amount' and sortColumnOrder == 'ASC'">
                    ORDER BY c.max_discount_amount ASC
                </when>
                <when test="sortColumnCode == 'max_discount_amount' and sortColumnOrder == 'DESC'">
                    ORDER BY c.max_discount_amount DESC
                </when>

                <when test="sortColumnCode == 'min_required_amount' and sortColumnOrder == 'ASC'">
                    ORDER BY c.min_required_amount ASC
                </when>
                <when test="sortColumnCode == 'min_required_amount' and sortColumnOrder == 'DESC'">
                    ORDER BY c.min_required_amount DESC
                </when>

                <when test="sortColumnCode == 'service_type' and sortColumnOrder == 'ASC'">
                    ORDER BY c.service_type ASC
                </when>
                <when test="sortColumnCode == 'service_type' and sortColumnOrder == 'DESC'">
                    ORDER BY c.service_type DESC
                </when>

                <when test="sortColumnCode == 'created_id' and sortColumnOrder == 'ASC'">
                    ORDER BY i.created_id ASC
                </when>
                <when test="sortColumnCode == 'created_id' and sortColumnOrder == 'DESC'">
                    ORDER BY i.created_id DESC
                </when>

                <otherwise>
                    ORDER BY i.issue_date DESC
                </otherwise>
            </choose>
        </if>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="getCouponIssueCountTotal"
            parameterType="com.cashmallow.api.interfaces.coupon.dto.req.CouponSearchRequest"
            resultType="java.lang.Long">

        SELECT count(i.id)
        FROM coupon_issue_v2 i
        LEFT OUTER JOIN coupon_v2 c
        ON c.id = i.coupon_id
        WHERE c.from_country_code = #{fromCountryCode}
        <if test="couponCodeName != null and !''.equals(couponCodeName)">
            AND (
                c.coupon_code LIKE CONCAT(#{couponCodeName}, '%') OR c.coupon_name LIKE CONCAT(#{couponCodeName}, '%')
            )
        </if>
        <if test="searchStartDate != null and !''.equals(searchStartDate) and searchEndDate != null and !''.equals(searchEndDate)">
            AND i.issue_date_utc BETWEEN #{searchStartDate} AND #{searchEndDate}
        </if>
        <if test="isSystem != null and !''.equals(isSystem)">
            AND c.is_system = #{isSystem}
        </if>
        <if test="isActive != null and !''.equals(isActive)">
            AND c.is_active = #{isActive}
        </if>
    </select>

    <!-- Coupon 에 해당하는 적용 통화 조회 -->
    <select id="applyCurrencyByCouponList" parameterType="map" resultType="com.cashmallow.api.domain.model.coupon.entity.ApplyCurrency">
        SELECT coupon_id
             , target_iso_3166
          FROM coupon_apply_currency_v2
         WHERE coupon_id IN (
             <foreach collection="couponIds" item="couponId" separator=",">
                 #{couponId}
             </foreach>
             )
        ORDER BY target_iso_3166 ASC
    </select>

    <!-- Coupon 발급 정보 테이블 -->
    <insert id="createCouponIssue" parameterType="com.cashmallow.api.domain.model.coupon.entity.CouponIssue">
        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID() as id
        </selectKey>

        INSERT INTO coupon_issue_v2(id, coupon_id, target_type, send_type, job_key, issue_date, issue_date_utc, created_id, created_date)
        VALUES (#{id}, #{couponId}, #{targetType},  #{sendType}, #{jobKey}, #{issueDate}, #{issueDateUtc}, #{createdId}, NOW())
    </insert>

    <!-- Coupon 발급된 유저 정보 테이블 -->
    <insert id="createUsersCoupon" parameterType="map">
        INSERT INTO coupon_user_v2(id, coupon_issue_id, coupon_id, target_user_id, invite_user_id,
                                    available_status, coupon_used_amount,
                                    coupon_used_date, coupon_used_date_utc,
                                    created_date, updated_date)
        VALUES
        <foreach collection="users" item="targetUserId" separator=",">
            (#{couponUser.id}, #{couponUser.couponIssueId}, #{couponUser.couponId}, #{targetUserId}, #{couponUser.inviteUserId},
            #{couponUser.availableStatus}, #{couponUser.couponUsedAmount},
            #{couponUser.couponUsedDate}, #{couponUser.couponUsedDateUtc},
            NOW(), NOW())
        </foreach>
    </insert>

    <!-- Coupon 발급 ID 에 대한 유저 목록 조회 -->
    <select id="getUsersByCouponIssueId" parameterType="map" resultType="com.cashmallow.api.domain.model.coupon.vo.CouponIssueUser">
        SELECT id
             , coupon_id
             , target_user_id
             , available_status
             , invite_user_id
             , created_date
             , coupon_used_date
             , coupon_used_date_utc
             , coupon_used_amount
             , coupon_issue_id
          FROM coupon_user_v2
         WHERE coupon_issue_id = #{couponIssueId}
        <if test="sortColumnCode != null and !''.equals(sortColumnCode)">
            <choose>
                <when test="sortColumnCode == 'user_id' and sortColumnOrder == 'ASC'">
                    ORDER BY target_user_id ASC
                </when>
                <when test="sortColumnCode == 'user_id' and sortColumnOrder == 'DESC'">
                    ORDER BY target_user_id DESC
                </when>

                <when test="sortColumnCode == 'invite_user_id' and sortColumnOrder == 'ASC'">
                    ORDER BY invite_user_id ASC
                </when>
                <when test="sortColumnCode == 'invite_user_id' and sortColumnOrder == 'DESC'">
                    ORDER BY invite_user_id DESC
                </when>

                <when test="sortColumnCode == 'created_date' and sortColumnOrder == 'ASC'">
                    ORDER BY created_date ASC
                </when>
                <when test="sortColumnCode == 'created_date' and sortColumnOrder == 'DESC'">
                    ORDER BY created_date DESC
                </when>

                <when test="sortColumnCode == 'coupon_used_date' and sortColumnOrder == 'ASC'">
                    ORDER BY coupon_used_date ASC
                </when>
                <when test="sortColumnCode == 'coupon_used_date' and sortColumnOrder == 'DESC'">
                    ORDER BY coupon_used_date DESC
                </when>

                <when test="sortColumnCode == 'coupon_used_amount' and sortColumnOrder == 'ASC'">
                    ORDER BY coupon_used_amount ASC
                </when>
                <when test="sortColumnCode == 'coupon_used_amount' and sortColumnOrder == 'DESC'">
                    ORDER BY coupon_used_amount DESC
                </when>

                <otherwise>
                </otherwise>
            </choose>
        </if>
    </select>



    <update id="updateReservedCouponIssueUsers" parameterType="map">
        UPDATE coupon_user_v2
           SET available_status = #{availableStatus}
             , updated_date = NOW()
         WHERE coupon_issue_id IN (
        <foreach collection="couponIssueIds" item="issueId" separator=",">
            #{issueId}
        </foreach>
             )
    </update>

    <update id="updateExpireCoupon" parameterType="map">
        UPDATE coupon_user_v2
           SET available_status = 'EXPIRED'
             , updated_date = NOW()
         WHERE id IN (
        <foreach collection="userList" item="user" separator=",">
            #{user.couponIssueUserId}
        </foreach>
        ) AND target_user_id IN (
        <foreach collection="userList" item="user" separator=",">
            #{user.targetUserId}
        </foreach>
        ) AND available_status = 'AVAILABLE'
    </update>

    <!-- 생일자 n일 전 쿠폰 발급 -->
    <!-- 전체 유저 중에서 올해 생일 쿠폰을 발급받은 유저 -->
    <select id="getCouponIssuedBirthdayUserByCouponId" parameterType="map" resultType="java.lang.Long">
        SELECT u.target_user_id as user_id
        FROM coupon_user_v2 u
       INNER JOIN coupon_issue_v2 i
                                 ON u.coupon_issue_id = i.id
        WHERE i.coupon_id = #{couponId}
          AND DATE_FORMAT(i.issue_date, '%Y') = #{currentYear}
    </select>

    <!-- 생일 쿠폰 발급: 본인인증을 완료한 활성화된 모든 유저 중에서 7일 후 생일인 유저 조회
         Push 알림: 유저 ID 리스트로 유저 조회 -->
    <select id="getUserListByEvent" parameterType="map" resultType="com.cashmallow.api.domain.model.user.User">
         SELECT u.id
             ,  u.login
             ,  u.password_hash
             ,  u.first_name
             ,  u.last_name
             ,  u.email
             ,  u.allow_recv_email
             ,  u.activated
             ,  u.lang_key
             ,  u.profile_photo
             ,  u.birth_date
             ,  u.cls
             ,  u.country
             ,  u.recommender_id
             ,  u.last_login_time
             ,  u.last_logout_time
             ,  u.creator
             ,  u.created_date
             ,  u.last_modifier
             ,  u.last_modified_date
             ,  u.deactivated_date
             ,  u.instance_id
             ,  u.device_type
             ,  u.version_code
             ,  u.agree_privacy
             ,  u.agree_terms
             ,  u.phone_number
             ,  u.phone_country
             ,  u.device_os_version
             ,  u.login_fail_count
             ,  u.bundle_version
          FROM user u
          JOIN traveler t
            ON t.user_id = u.id
         WHERE u.activated = '1' -- 활성화 됨
           AND u.cls = 'T'  -- admin('A') traveler('T')
           AND u.country = #{fromCountryCode}
           <if test="beforeBirthday != null and !''.equals(beforeBirthday)">
               AND u.birth_date IS NOT NULL AND u.birth_date != ''
               AND DATE_FORMAT(u.birth_date, '%m%d') = DATE_FORMAT(#{beforeBirthday}, '%m%d') -- 7일 후 생일인 사람만
               AND t.certification_ok = 'Y' -- 본인인증 완료
           </if>
            <if test="userIds != null and !''.equals(userIds)">
                AND u.id IN (
                <foreach collection="userIds" item="userId" separator=",">
                    #{userId}
                </foreach>
                )
            </if>
    </select>

    <select id="getCouponIssuedById" parameterType="java.lang.Long" resultType="com.cashmallow.api.domain.model.coupon.entity.CouponIssue">
        SELECT id
             , coupon_id
             , target_type
             , send_type
             , job_key
             , issue_date
             , issue_date_utc
             , created_id
          FROM coupon_issue_v2
         WHERE id = #{issueId}
    </select>

    <delete id="deleteCouponIssuedById" parameterType="java.lang.Long">
        DELETE FROM coupon_issue_v2
         WHERE id = #{issueId}
    </delete>

    <delete id="deleteCouponIssuedUserByCouponIssueId" parameterType="java.lang.Long">
        DELETE FROM coupon_user_v2
         WHERE coupon_issue_id = #{issueId}
    </delete>

    <update id="updateStatusByCouponIssueUserSyncIds" parameterType="map">
        UPDATE coupon_user_v2
           SET available_status = #{availableStatus}
             , updated_date = NOW()
         WHERE id IN (
                <foreach collection="userCouponList" item="item" separator=",">
                    #{item.couponIssueUserSyncId}
                </foreach>)
    </update>
</mapper>