<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Mybatis 사용법: http://www.mybatis.org/mybatis-3/ko/index.html -->

<mapper namespace="com.cashmallow.api.domain.model.notification.NotificationMapper">

    <!-- 10.2.1.2 edited by Alex 20170609 : 사용자 인증 email 언어별 인증 발송 할수 있도록 수정 -->
    <select id="getEmailInfo" parameterType="string" resultType="hashmap">
        SELECT *
        FROM emailinfo
        WHERE type = #{type}
    </select>

    <!-- 10.2.1.2 edited by Alex 20170609 : 사용자 인증 email 언어별 인증 발송 할수 있도록 수정 -->
    <select id="getEmailTemplate" parameterType="hashmap" resultType="hashmap">
        SELECT *
        FROM email_template
        WHERE language_type LIKE CONCAT(#{languageType}, '%')
          AND type = #{type}
          AND allow = 'Y'
        LIMIT 1
    </select>

    <!-- 10.2.1.3 edited by Alex 20170804 : 사용자 인증 email 언어별 인증 발송 계좌인증완료 -->
    <select id="getEmailTemplateComplete" parameterType="hashmap" resultType="hashmap">
        SELECT *
        FROM email_template
        WHERE language_type LIKE CONCAT((SELECT lang_key FROM user WHERE login = #{login}), '%')
          AND type = #{type}
          AND allow = 'Y'
        LIMIT 1
    </select>

    <select id="isAvailableEmailVerify" resultType="boolean">
        SELECT IF(DATE_ADD(MAX(created_at), INTERVAL 1 MINUTE) > NOW(), FALSE, TRUE) AS available
        FROM email_verify
        WHERE user_id = #{userId};
    </select>

    <select id="isNotAvailablePassword" resultType="boolean">
        SELECT COUNT(1)
        FROM email_verify
        WHERE user_id = #{userId}
          AND password = #{password}
    </select>


    <select id="getVerifiedEmailPassword" resultType="com.cashmallow.api.domain.model.notification.EmailTokenVerity">
        select EV.user_id AS userId, EV.password, EV.token
        from (
                 SELECT *
                 FROM email_verify
                 WHERE user_id = (
                     SELECT user_id
                     FROM email_verify
                     WHERE token = #{token}
                       AND DATE_ADD(created_at, INTERVAL 10 MINUTE) > NOW()
                 )
                 ORDER BY created_at DESC
                 LIMIT 1
             ) EV
        WHERE EV.token = #{token}
    </select>

    <select id="getVerifiedEmailCode" resultType="com.cashmallow.api.domain.model.notification.EmailTokenVerity">
        SELECT token
        FROM email_verify
        WHERE token = #{token}
          AND DATE_ADD(created_at, INTERVAL 10 MINUTE) > NOW();
    </select>


    <update id="updateVerifiedEmailPassword" parameterType="com.cashmallow.api.domain.model.notification.EmailTokenVerity">
        UPDATE email_verify
        SET verified_at = NOW(),
            password    = #{password}
        WHERE token = #{token}
    </update>

    <insert id="addVerifiedEmailPassword" parameterType="com.cashmallow.api.domain.model.notification.EmailTokenVerity">
        INSERT INTO email_verify(token, user_id, login_fail_count, type, password)
        VALUES (#{token}, #{userId}, #{loginFailCount}, #{type}, #{password})
        ON DUPLICATE KEY UPDATE token = #{token}
    </insert>

    <!-- FCM_TOKEN TABLE -->
    <select id="getFcmTokenByUserId" parameterType="long" resultType="hashmap">
        SELECT fcm_token, dev_type
        FROM fcm_token f
        WHERE f.user_id = #{userId}
    </select>

    <!-- 70.1. Client의 token을 등록/갱신한다. -->
    <insert id="addFcmToken" parameterType="HashMap">
        INSERT INTO fcm_token (user_id, fcm_token, dev_type, updated_date)
        VALUES (#{userId}, #{fcmToken}, #{devType}, NOW())
        ON DUPLICATE KEY
            UPDATE fcm_token    = #{fcmToken},
                   dev_type     = #{devType},
                   updated_date = NOW()
    </insert>


    <!-- FCM_NOTIFICATION TABLE -->
    <!-- 70.2. token 사용자에게 전송할 메시지를 등록한다. -->
    <insert id="addFcmNotificationMsg" parameterType="HashMap">
        INSERT INTO fcm_notification (user_id, event_code, event_value, org_id, ft_status)
        VALUES (#{user_id}, #{event_code}, #{event_value}, #{org_id}, '0')
    </insert>

    <!-- 77.3. 7일이 경과한 알림 메시지들을 삭제한다. -->
    <delete id="removeFcmNotification">
        DELETE
        FROM fcm_notification
        WHERE DATEDIFF(NOW(), created_date) > 7
    </delete>

    <!-- 70.5. edited by Alex 20170621 : fcm_notification를 조회한다  -->
    <select id="getFcmNotification" parameterType="hashmap" resultType="hashmap">
        SELECT id, user_id, event_code, event_value, org_id, ft_status, created_date, updated_date
        FROM fcm_notification
        WHERE id IS NOT NULL
        <if test="@com.cashmallow.common.CommonUtil@isNotEmpty(ft_status)">
            AND ft_status = #{ft_status}
        </if>
        <if test="@com.cashmallow.common.CommonUtil@isNotEmpty(user_id)">
            AND user_id = #{user_id}
        </if>
    </select>

    <!-- Table account_token -->
    <select id="getEmailToken" resultType="com.cashmallow.api.domain.model.notification.EmailToken">
        SELECT *
        FROM account_token
        WHERE user_id = #{userId}
    </select>

    <select id="getFcmTokensByUserIds" resultType="com.cashmallow.api.domain.model.notification.FcmToken">
        select user_id, fcm_token, dev_type, updated_date
        from fcm_token
        where user_id in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <insert id="insertEmailToken" parameterType="com.cashmallow.api.domain.model.notification.EmailToken">
        REPLACE INTO account_token (user_id, kind_of_ts, account_token, created_date, code)
        VALUES (#{userId}, #{kindOfTs}, #{accountToken}, NOW(), #{code})
    </insert>

    <delete id="deleteEmailToken" parameterType="com.cashmallow.api.domain.model.notification.EmailToken">
        DELETE
        FROM account_token
        WHERE user_id = #{userId}
          AND kind_of_ts = #{kindOfTs}
          AND account_token = #{accountToken}
    </delete>

    <delete id="deleteEmailTokenByUserId">
        DELETE
        FROM account_token
        WHERE user_id = #{userId}
    </delete>

</mapper>